#!/usr/bin/env node

/**
 * Module dependencies.
 */

let debug = require('debug')('tripbyselfserver:server');
let http = require('http');
let utils = require("../utils");
let createError = require('http-errors');
let express = require('express');
let path = require('path');
let cookieParser = require('cookie-parser');
let logger = require('morgan');
let mysql = require("promise-mysql");
let fs = require("fs");
let md5 = require("md5")

global.module = {}

let cors = require("cors")

let app = express();

// view engine setup
app.set('views', path.resolve("tripByselfServer/views"));
app.set('view engine', 'jade');


// 当credentials = true的时候  origin不能是*
let allowedOrigins = ['https://192.168.0.50:8080','https://192.168.100.107:8080', 'https://triprecord-server.herokuapp.com', 'https://maggieyang1994.github.io','http://localhost:8080']
let corsOption = {
  origin: function (origin, callback) {
    if (allowedOrigins.indexOf(origin) === -1) {
      callback(new Error('Not allowed by CORS'))
    } else {
      callback(null, true)
    }
  },
  credentials: true
}
app.use(cors(corsOption))
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(express.static(path.join(__dirname, 'public')));


// setmodule
(async () => {
  let file = await utils.readFile("./Api");
  for (let service of file) {
    let curModule = require(service);
    let moduleName = service.slice(service.lastIndexOf(process.platform === 'linux' ? '/' : '\\') + 1, service.lastIndexOf("\.js"));
    console.log('moudleName', moduleName)
    global.module[moduleName] = curModule;

  }
  console.log('global', global.module)
  let pool = await mysql.createPool({
    host: 'fedev.me',
    user: 'root',
    password: 'rootroot',
    database: 'trip'
    // host: '127.0.0.1',
    // user: 'root',
    // password: 'Yt135212',
    // database: 'trip'
  })
  global.pool = pool
})()



app.use("*", async function (req, res) {
  if (req.baseUrl === '/getImage') {
    res.setHeader("Location", 'https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Location');
    // 301永久重定向   302暂时重定向
    res.status(301).end();
    // try {
    //   let stat = fs.statSync('tripByselfServer/public/javascripts/demo.js');
    //   let lastTime = req.headers['if-modified-since'];
    //   updateTime = new Date(stat.mtime).toGMTString();
    //   // 第一次请求的时候 响应头带上last-modified  如果强缓存没有命中
    //   // 第二次请求的时候 请求头会带上if-modified-since(其实就是上一次请求last-modified 的值)
    //   // 这个时候将if-modified-since与文件修改时间做对比  如果相同则返回304 否则重新返回资源并重新设置过期时间和last-modified

    //   // last-modified 和 if-modified-since 问题
    //   // 1 文件修改时间 不能精确到秒  如果文件修改时间很快 无法检测到更新
    //   // 2 面对一些重复性改变 比如ctrl-x ctrl-v 文件内容其实并没有发生改变 但是修改时间会变
    //   // 所以出现了etag  但是etag又有性能问题  因为服务器需要读取文件内容 才能知道文件内容是否真的有变化（etag he if-none-match）
    //   if (lastTime && updateTime === lastTime) {

    //     //   如果缓存失效（没有命中强缓存）   则会命中协商缓存  由服务器判断是否需要重新返回资源
    //     // res.writeHead(304, 'Not Modified');
    //     // res.end();
    //     // res.statusCode = 304;   
    //     // res.end();
    //     // res.status(304).end();
    //     // res.sendStatus(304);
    //     res.writeHead(304, "Not Modified")
    //     res.end()
    //     return;
    //   } else {
    //     let file = fs.readFileSync("tripByselfServer/public/javascripts/demo.js", 'utf-8');
    //     // 设置缓存有效期  从请求正确返回时间开始算  对于强缓存 只需要后端设置max-age响应头  由浏览器判断如果命中了强缓存 则直接返回缓存  不请求服务器
    //     // 注意f12  调试的时候取消 disable cache
    //     // res.setHeader('Set-Cookie', 'username=maggie;Max-age=100000;HttpOnly')
    //     // res.setHeader('Cache-Control', 'max-age=0');
    //     res.setHeader('Last-Modified', updateTime);
    //     // res.setHeader("Etag", ETag)
    //     res.end(file)
    //     return;
    //   }
    // } catch (e) {
    //   res.status(500).json(e).end()
    // }
  }
  let { service, target, method, param } = utils.parseHttpRequest(req);
  if (!service) res.status(500).end();
  try {
    let sessionId = req.cookies.sessionId
    let login_id = req.cookies.login_id
    // 请求前 验证sessionId
    if(req.baseUrl === '/user/getUserDetail' || req.baseUrl === '/user/logout'){
      // if(sessionId){
      //   // 已经登陆过 
      //   res.status(204).end()
      // }
      console.log("getUserDetail")
      let resData = await service(global.pool, param, req, res);
      res.status(200).json(resData).end();
      return
    }
    
    if(!sessionId){
      res.status(401).end()
    } else {
      let token = await pool.query(`select * from trip_user_token where login_id = '${login_id}' and token_text='${sessionId}' and token_is_active = 1 and token_exp_dt >= ${Date.now()}`);
      if(!token.length) res.status(401).json('token expires').end();
      let resData = await service(global.pool, param, req, res);
      res.status(200).json(resData).end()
    }
  } catch (e) {
    res.status(500).json(e).end()
  }
})

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});











let port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log("listen in port " + port)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
