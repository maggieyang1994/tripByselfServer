#!/usr/bin/env node

/**
 * Module dependencies.
 */

let debug = require('debug')('tripbyselfserver:server');
let http = require('http');
let utils = require("../utils");
let createError = require('http-errors');
let express = require('express');
let path = require('path');
let cookieParser = require('cookie-parser');
let logger = require('morgan');
let mysql = require("promise-mysql");

global.module = {}

let cors = require("cors")

let app = express();

// view engine setup
app.set('views', path.resolve("tripByselfServer/views"));
app.set('view engine', 'jade');

app.use(cors())
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(express.static(path.join(__dirname, 'public')));


// setmodule
(async () => {
  let file = await utils.readFile("tripByselfServer/Api");
  for (let service of file) {
    let curModule = require(service);
    let moduleName = service.slice(service.lastIndexOf("\\") + 1, service.lastIndexOf("\.js"))
    global.module[moduleName] = curModule
  }

  let pool = await mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'Yt135212',
    database: 'trip'
  })
  global.pool = pool
})()



app.use("*", async function (req, res) {
  console.log(req);
  let {service, target, method, param} = utils.parseHttpRequest(req);
  if (!service) res.status(500).end();
  try {
    let resData = await service(global.pool, param, req, res);
    console.log(resData);
    res.status(200).json(resData).end()
  } catch (e) {
    res.status(500).json(e).end()
  }
})

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});











let port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
